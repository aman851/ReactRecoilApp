{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  balance: 0,\n  loan: 0,\n  loanPurpose: \"\",\n  isLoading: false\n};\nconst accountSlice = createSlice({\n  name: \"account\",\n  initialState,\n  reducers: {\n    deposit(state, action) {\n      state.balance += action.payload;\n      state.isLoading = false;\n    },\n    withdraw(state, action) {\n      state.balance -= action.payload;\n    },\n    requestLoan: {\n      prepare(amount, purpose) {\n        return {\n          payload: {\n            amount,\n            purpose\n          }\n        };\n      },\n      reducer(state, action) {\n        if (state.loan > 0) return;\n        state.loan = action.payload.amount;\n        state.loanPurpose = action.payload.purpose;\n        state.balance = state.balance + action.payload.amount;\n      }\n    },\n    payLoan(state) {\n      state.balance -= state.loan;\n      state.loan = 0;\n      state.loanPurpose = \"\";\n    },\n    convertingCurrency(state) {\n      state.isLoading = true;\n    }\n  }\n});\nexport const {\n  withdraw,\n  requestLoan,\n  payLoan\n} = accountSlice.actions;\nexport function deposit(amount, currency) {\n  if (currency === \"USD\") return {\n    type: \"account/deposit\",\n    payload: amount\n  };\n  return async function (dispatch, getState) {\n    dispatch({\n      type: \"account/convertingCurrency\"\n    });\n    const res = await fetch(`https://api.frankfurter.app/latest?amount=${amount}&from=${currency}&to=USD`);\n    const data = await res.json();\n    const converted = data.rates.USD;\n    dispatch({\n      type: \"account/deposit\",\n      payload: converted\n    });\n  };\n}\nexport default accountSlice.reducer;\n\n/*\r\nexport default function accountReducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case \"account/deposit\":\r\n      return {\r\n        ...state,\r\n        balance: state.balance + action.payload,\r\n        isLoading: false,\r\n      };\r\n    case \"account/withdraw\":\r\n      return { ...state, balance: state.balance - action.payload };\r\n    case \"account/requestLoan\":\r\n      if (state.loan > 0) return state;\r\n      // LATER\r\n      return {\r\n        ...state,\r\n        loan: action.payload.amount,\r\n        loanPurpose: action.payload.purpose,\r\n        balance: state.balance + action.payload.amount,\r\n      };\r\n    case \"account/payLoan\":\r\n      return {\r\n        ...state,\r\n        loan: 0,\r\n        loanPurpose: \"\",\r\n        balance: state.balance - state.loan,\r\n      };\r\n    case \"account/convertingCurrency\":\r\n      return { ...state, isLoading: true };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport function deposit(amount, currency) {\r\n  if (currency === \"USD\") return { type: \"account/deposit\", payload: amount };\r\n\r\n  return async function (dispatch, getState) {\r\n    dispatch({ type: \"account/convertingCurrency\" });\r\n\r\n    const res = await fetch(\r\n      `https://api.frankfurter.app/latest?amount=${amount}&from=${currency}&to=USD`\r\n    );\r\n    const data = await res.json();\r\n    const converted = data.rates.USD;\r\n\r\n    dispatch({ type: \"account/deposit\", payload: converted });\r\n  };\r\n}\r\n\r\nexport function withdraw(amount) {\r\n  return { type: \"account/withdraw\", payload: amount };\r\n}\r\n\r\nexport function requestLoan(amount, purpose) {\r\n  return {\r\n    type: \"account/requestLoan\",\r\n    payload: { amount, purpose },\r\n  };\r\n}\r\n\r\nexport function payLoan() {\r\n  return { type: \"account/payLoan\" };\r\n}\r\n*/","map":{"version":3,"names":["createSlice","initialState","balance","loan","loanPurpose","isLoading","accountSlice","name","reducers","deposit","state","action","payload","withdraw","requestLoan","prepare","amount","purpose","reducer","payLoan","convertingCurrency","actions","currency","type","dispatch","getState","res","fetch","data","json","converted","rates","USD"],"sources":["C:/Users/ACER/Downloads/fino/src/features/accounts/accountSlice.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = {\r\n  balance: 0,\r\n  loan: 0,\r\n  loanPurpose: \"\",\r\n  isLoading: false,\r\n};\r\n\r\nconst accountSlice = createSlice({\r\n  name: \"account\",\r\n  initialState,\r\n  reducers: {\r\n    deposit(state, action) {\r\n      state.balance += action.payload;\r\n      state.isLoading = false;\r\n    },\r\n    withdraw(state, action) {\r\n      state.balance -= action.payload;\r\n    },\r\n    requestLoan: {\r\n      prepare(amount, purpose) {\r\n        return {\r\n          payload: { amount, purpose },\r\n        };\r\n      },\r\n\r\n      reducer(state, action) {\r\n        if (state.loan > 0) return;\r\n\r\n        state.loan = action.payload.amount;\r\n        state.loanPurpose = action.payload.purpose;\r\n        state.balance = state.balance + action.payload.amount;\r\n      },\r\n    },\r\n    payLoan(state) {\r\n      state.balance -= state.loan;\r\n      state.loan = 0;\r\n      state.loanPurpose = \"\";\r\n    },\r\n    convertingCurrency(state) {\r\n      state.isLoading = true;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { withdraw, requestLoan, payLoan } = accountSlice.actions;\r\n\r\nexport function deposit(amount, currency) {\r\n  if (currency === \"USD\") return { type: \"account/deposit\", payload: amount };\r\n\r\n  return async function (dispatch, getState) {\r\n    dispatch({ type: \"account/convertingCurrency\" });\r\n\r\n    const res = await fetch(\r\n      `https://api.frankfurter.app/latest?amount=${amount}&from=${currency}&to=USD`\r\n    );\r\n    const data = await res.json();\r\n    const converted = data.rates.USD;\r\n\r\n    dispatch({ type: \"account/deposit\", payload: converted });\r\n  };\r\n}\r\n\r\nexport default accountSlice.reducer;\r\n\r\n/*\r\nexport default function accountReducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case \"account/deposit\":\r\n      return {\r\n        ...state,\r\n        balance: state.balance + action.payload,\r\n        isLoading: false,\r\n      };\r\n    case \"account/withdraw\":\r\n      return { ...state, balance: state.balance - action.payload };\r\n    case \"account/requestLoan\":\r\n      if (state.loan > 0) return state;\r\n      // LATER\r\n      return {\r\n        ...state,\r\n        loan: action.payload.amount,\r\n        loanPurpose: action.payload.purpose,\r\n        balance: state.balance + action.payload.amount,\r\n      };\r\n    case \"account/payLoan\":\r\n      return {\r\n        ...state,\r\n        loan: 0,\r\n        loanPurpose: \"\",\r\n        balance: state.balance - state.loan,\r\n      };\r\n    case \"account/convertingCurrency\":\r\n      return { ...state, isLoading: true };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport function deposit(amount, currency) {\r\n  if (currency === \"USD\") return { type: \"account/deposit\", payload: amount };\r\n\r\n  return async function (dispatch, getState) {\r\n    dispatch({ type: \"account/convertingCurrency\" });\r\n\r\n    const res = await fetch(\r\n      `https://api.frankfurter.app/latest?amount=${amount}&from=${currency}&to=USD`\r\n    );\r\n    const data = await res.json();\r\n    const converted = data.rates.USD;\r\n\r\n    dispatch({ type: \"account/deposit\", payload: converted });\r\n  };\r\n}\r\n\r\nexport function withdraw(amount) {\r\n  return { type: \"account/withdraw\", payload: amount };\r\n}\r\n\r\nexport function requestLoan(amount, purpose) {\r\n  return {\r\n    type: \"account/requestLoan\",\r\n    payload: { amount, purpose },\r\n  };\r\n}\r\n\r\nexport function payLoan() {\r\n  return { type: \"account/payLoan\" };\r\n}\r\n*/\r\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAE9C,MAAMC,YAAY,GAAG;EACnBC,OAAO,EAAE,CAAC;EACVC,IAAI,EAAE,CAAC;EACPC,WAAW,EAAE,EAAE;EACfC,SAAS,EAAE;AACb,CAAC;AAED,MAAMC,YAAY,GAAGN,WAAW,CAAC;EAC/BO,IAAI,EAAE,SAAS;EACfN,YAAY;EACZO,QAAQ,EAAE;IACRC,OAAOA,CAACC,KAAK,EAAEC,MAAM,EAAE;MACrBD,KAAK,CAACR,OAAO,IAAIS,MAAM,CAACC,OAAO;MAC/BF,KAAK,CAACL,SAAS,GAAG,KAAK;IACzB,CAAC;IACDQ,QAAQA,CAACH,KAAK,EAAEC,MAAM,EAAE;MACtBD,KAAK,CAACR,OAAO,IAAIS,MAAM,CAACC,OAAO;IACjC,CAAC;IACDE,WAAW,EAAE;MACXC,OAAOA,CAACC,MAAM,EAAEC,OAAO,EAAE;QACvB,OAAO;UACLL,OAAO,EAAE;YAAEI,MAAM;YAAEC;UAAQ;QAC7B,CAAC;MACH,CAAC;MAEDC,OAAOA,CAACR,KAAK,EAAEC,MAAM,EAAE;QACrB,IAAID,KAAK,CAACP,IAAI,GAAG,CAAC,EAAE;QAEpBO,KAAK,CAACP,IAAI,GAAGQ,MAAM,CAACC,OAAO,CAACI,MAAM;QAClCN,KAAK,CAACN,WAAW,GAAGO,MAAM,CAACC,OAAO,CAACK,OAAO;QAC1CP,KAAK,CAACR,OAAO,GAAGQ,KAAK,CAACR,OAAO,GAAGS,MAAM,CAACC,OAAO,CAACI,MAAM;MACvD;IACF,CAAC;IACDG,OAAOA,CAACT,KAAK,EAAE;MACbA,KAAK,CAACR,OAAO,IAAIQ,KAAK,CAACP,IAAI;MAC3BO,KAAK,CAACP,IAAI,GAAG,CAAC;MACdO,KAAK,CAACN,WAAW,GAAG,EAAE;IACxB,CAAC;IACDgB,kBAAkBA,CAACV,KAAK,EAAE;MACxBA,KAAK,CAACL,SAAS,GAAG,IAAI;IACxB;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEQ,QAAQ;EAAEC,WAAW;EAAEK;AAAQ,CAAC,GAAGb,YAAY,CAACe,OAAO;AAEtE,OAAO,SAASZ,OAAOA,CAACO,MAAM,EAAEM,QAAQ,EAAE;EACxC,IAAIA,QAAQ,KAAK,KAAK,EAAE,OAAO;IAAEC,IAAI,EAAE,iBAAiB;IAAEX,OAAO,EAAEI;EAAO,CAAC;EAE3E,OAAO,gBAAgBQ,QAAQ,EAAEC,QAAQ,EAAE;IACzCD,QAAQ,CAAC;MAAED,IAAI,EAAE;IAA6B,CAAC,CAAC;IAEhD,MAAMG,GAAG,GAAG,MAAMC,KAAK,CACpB,6CAA4CX,MAAO,SAAQM,QAAS,SAAQ,CAC9E;IACD,MAAMM,IAAI,GAAG,MAAMF,GAAG,CAACG,IAAI,EAAE;IAC7B,MAAMC,SAAS,GAAGF,IAAI,CAACG,KAAK,CAACC,GAAG;IAEhCR,QAAQ,CAAC;MAAED,IAAI,EAAE,iBAAiB;MAAEX,OAAO,EAAEkB;IAAU,CAAC,CAAC;EAC3D,CAAC;AACH;AAEA,eAAexB,YAAY,CAACY,OAAO;;AAEnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}